#!/bin/sh
#
#-
# Copyright (c) 2017  StorPool.
# All rights reserved.
#
# Authors:
#  Anton Todorov <a.todorov@storpool.com>
#
# chkconfig: - 21 79
# description: Storpool nvmed service
# processname: storpool_nvmed
#
### BEGIN INIT INFO
# Provides: storpool_nvmed
# Required-Start: $local_fs $network storpool_hugepages
# Required-Stop: $local_fs $network storpool_hugepages
# Should-Start: $syslog storpool_reaffirm
# Should-Stop: $syslog
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop StorPool Nvme Daemon
# Description: StorPool nvmed provides access to nvme
#              devices
### END INIT INFO

# Do NOT "set -e"

NAME=storpool_nvmed
ARGS="-d"
KILL_TIMEOUT=60

# set secure PATH
PATH="/sbin:/bin:/usr/sbin:/usr/bin"

if [ -f /etc/storpool.conf ]; then
	if [ -f /usr/lib/storpool/storpool_confget.sh ]; then
		. /usr/lib/storpool/storpool_confget.sh
	else
		echo "Missing /usr/lib/storpool/storpool_confget.sh!" >&2
		exit 1
	fi
else
	echo "Missing /etc/storpool.conf" >&2
	exit 1
fi

[ -z "$SP_OURID" ] && echo "SP_OURID not set! exitting!" && exit 1
[ -z "$SP_EXPECTED_NODES" ] && echo "SP_EXPECTED_NODES not set! exitting!" && exit 1
[ -z "$SP_WORKDIR" ] && SP_WORKDIR="/var/run/storpool"
[ -z "$LOCK_FILE" ] && LOCK_FILE="/var/lock/subsys/${NAME}"
[ -z "$RUNDIR" ] && RUNDIR="$SP_WORKDIR"
[ -z "$PIDDIR" ] && PIDDIR="/var/run"

PIDFILE="${PIDDIR}/${NAME}.pid"

#COMMON_FUNCTIONS
# if /etc/rc.d/init.d/functions is not dound...
success()
{
	echo -ne "[  OK  ]\r"
}

failure()
{
	echo -ne "[FAILED]\r"
}

status()
{
	local pid=
	local ret
	while [ "$#" -gt 1 ]; do
		case "$1" in
			-p)
				read pid < "$2"
				shift 2
				;;
			-l)
				shift 2
				;;
			-b)
				shift 2
				;;
			*)
				echo "Unsupported option $1 or something" 1>&2
				exit 1
				;;
		esac
	done
 	[ -n "$pid" ] || pid="$(pidof $1 2>/dev/null)"
	kill -0 "$pid"
	ret=$?
	if [ "$ret" = "0" ]; then
		echo "${1:-FIXME} (pid ${pid}) is running..."
	else
		echo "${1:-FIXME} is stopped"
	fi
	return "$ret"
}

if [ -f /etc/rc.d/init.d/functions ]; then
	. /etc/rc.d/init.d/functions
	
	# The version of __pids_pidof in /etc/init.d/functions calls pidof with -x
	# This means it matches scripts, including this one.
	# Redefine it here so that status (from the same file) works.
	# Otherwise simultaneous calls to stop() will loop forever
	__pids_pidof() {
		pidof -c -o $$ -o ${PPID} -o %PPID "$1" || \
		pidof -c -o $$ -o ${PPID} -o %PPID "${1##*/}"
	}
fi

#use LSB init functions if exists
if [ -f /lib/lsb/init-functions ] && [ -x /sbin/start-stop-daemon ]; then
	# Load the VERBOSE setting and other rcS variables
	[ -f /lib/init/vars.sh ] && . /lib/init/vars.sh
	# Define LSB log_* functions.
	# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
	# and status_of_proc is working.
	. /lib/lsb/init-functions
	lsb=LSB
	NAME="$NAME"
	DESC="StorPool `echo $NAME | cut -d'_' -f2-`"
	DAEMON="/usr/sbin/$NAME"
	DAEMON_ARGS="$ARGS --"
	SCRIPTNAME=/etc/init.d/$NAME
	EXEC_CHECK=/usr/bin/perl
	# Exit if the package is not installed
	[ -x "$DAEMON" ] || exit 0
fi

cleanUp()
{
	[ -f "$PIDFILE" ] && rm -f "$PIDFILE"
	[ -f "$LOCK_FILE" ] && rm -f "$LOCK_FILE"
}

waitPidFile()
{
	local cnt=0
	local tOut="${KILL_TIMEOUT:-60}"
	while [ "$cnt" -lt "$tOut" ]; do
		if [ -f "$PIDFILE" ]; then
			logger -t "${NAME}_init" "waiting to delete $PIDFILE"
			sleep 0.5
		else
			return 0
		fi
		cnt=$((cnt+1))
	done
	return 1
}

do_start()
{
	local ret=0
	echo -n "Starting ${NAME}: "
	
	if status -p "$PIDFILE" -b "/usr/bin/perl" "$NAME" 2>&1 >/dev/null; then
		ret="$?"
		echo -n "already running"
		success
	else
		ret="$?"
		if [ "$ret" -ne 3 ]; then
			cleanUp
		fi
		daemon --pidfile "$PIDFILE" "$NAME" $ARGS 2>&1 >/dev/null
		sleep 1
		if status -p "$PIDFILE" -b "/usr/bin/perl" "$NAME" 2>&1 >/dev/null; then
			ret="$?"
			touch "$LOCK_FILE"
			success
		else
			failure
			ret=7
		fi
	fi
	
	echo
	return "$ret"
}

do_startLSB()
{
	local RETVAL=0
	log_progress_msg "$NAME"
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --status --quiet --pidfile "$PIDFILE" --exec $EXEC_CHECK > /dev/null
	local RET=$?
	case "$RET" in
		0)
		    RETVAL=1
			;;
		[1-3])
		    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec $DAEMON -- $DAEMON_ARGS
		    RET=$?
		    [ $RET ] || RETVAL=2
			;;
		*)
			RETVAL=2
	esac
	return $RETVAL
}

do_stop()
{
	local ret=0
	echo -n "Stopping ${NAME}: "
	
	if status -p "$PIDFILE" -b "/usr/bin/perl" "$NAME" 2>&1 >/dev/null; then
		killproc -p "$PIDFILE" -d "$KILL_TIMEOUT" "$NAME"
		ret="$?"
		if [ "$ret" -eq 0 ]; then
			waitPidFile
			cleanUp
			success
		else
			failure
		fi
	else
		ret="$?"
		echo -n "not running"
	fi
	
	echo
	return "$ret"
}

do_stopLSB()
{
	log_progress_msg "$NAME"
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry="TERM/$KILL_TIMEOUT/KILL/5" --pidfile $PIDFILE --exec $EXEC_CHECK
	local RETVAL="$?"
	if [ "$RETVAL" -eq 1 ]; then
		start-stop-daemon --stop --quiet --retry="TERM/$KILL_TIMEOUT/KILL/5" --pidfile $PIDFILE --exec $DAEMON
		RETVAL="$?"
	fi
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry="0/$KILL_TIMEOUT/KILL/5" --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

do_reload()
{
	local func t
	func="do_reload_$NAME"
	if [ -n "$BASH_VERSION" ]; then
		t=`type -t "$func" 2>/dev/null`
	else
		if [ -n "$ZSH_VERSION" ]; then
			t=`whence -w "$func"`
			t="${t##* }"
		else
			t=`type "$func" 2>/dev/null`
			if [ "$t" != "${t#*function}" ]; then
				t='function'
			else
				t=''
			fi
		fi
	fi
	if [ "$t" = 'function' ] && "$func"; then
		return 0
	fi

	do_stop$lsb
	do_start$lsb
}

do_reloadLSB()
{
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC"
	do_stopLSB
	case "$?" in
		0|1)
			do_startLSB
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		*)
			# Failed to stop
			log_end_msg 1
	esac
}

do_status()
{
	status -p "$PIDFILE" -l "$NAME" -b "/usr/bin/perl" "$NAME"
}

do_statusLSB()
{
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
}

/usr/lib/storpool/check_prelinked "$NAME" "$PIDFILE"

case "$1" in
	start)
		if [ -n "$lsb" ]; then
			log_daemon_msg "Starting $DESC"
			do_startLSB
			case "$?" in
				0|1) log_end_msg 0
					;;
				2) log_end_msg 1
					;;
			esac
		else
			do_start
		fi
		;;
	stop)
		if [ -n "$lsb" ]; then
			log_daemon_msg "Stopping $DESC"
			do_stopLSB
			case "$?" in
				0|1) log_end_msg 0
					;;
				2) log_end_msg 1
					;;
			esac
		else
			do_stop
		fi
		;;
	restart|force-reload)
		do_reload$lsb
		;;
	status)
		do_status$lsb
		;;
	*)
		if [ -n "$lsb" ]; then
			echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		else
			echo "$0 [start|stop|restart|status]"
		fi
esac
